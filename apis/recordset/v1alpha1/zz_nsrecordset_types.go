/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NSRecordSetInitParameters struct {

	// (Set of String) The nameservers this record set will point to.
	// The nameservers this record set will point to.
	// +listType=set
	Nameservers []*string `json:"nameservers,omitempty" tf:"nameservers,omitempty"`

	// (Number) The TTL of the record set. Defaults to 3600.
	// The TTL of the record set. Defaults to `3600`.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type NSRecordSetObservation struct {

	// (String) Always set to the fully qualified domain name of the record set.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) The nameservers this record set will point to.
	// The nameservers this record set will point to.
	// +listType=set
	Nameservers []*string `json:"nameservers,omitempty" tf:"nameservers,omitempty"`

	// (Number) The TTL of the record set. Defaults to 3600.
	// The TTL of the record set. Defaults to `3600`.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String) DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	// DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type NSRecordSetParameters struct {

	// (Set of String) The nameservers this record set will point to.
	// The nameservers this record set will point to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Nameservers []*string `json:"nameservers,omitempty" tf:"nameservers,omitempty"`

	// (Number) The TTL of the record set. Defaults to 3600.
	// The TTL of the record set. Defaults to `3600`.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String) DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	// DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// NSRecordSetSpec defines the desired state of NSRecordSet
type NSRecordSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NSRecordSetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NSRecordSetInitParameters `json:"initProvider,omitempty"`
}

// NSRecordSetStatus defines the observed state of NSRecordSet.
type NSRecordSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NSRecordSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NSRecordSet is the Schema for the NSRecordSets API. Creates an NS type DNS record set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dns}
type NSRecordSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nameservers) || (has(self.initProvider) && has(self.initProvider.nameservers))",message="spec.forProvider.nameservers is a required parameter"
	Spec   NSRecordSetSpec   `json:"spec"`
	Status NSRecordSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NSRecordSetList contains a list of NSRecordSets
type NSRecordSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NSRecordSet `json:"items"`
}

// Repository type metadata.
var (
	NSRecordSet_Kind             = "NSRecordSet"
	NSRecordSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NSRecordSet_Kind}.String()
	NSRecordSet_KindAPIVersion   = NSRecordSet_Kind + "." + CRDGroupVersion.String()
	NSRecordSet_GroupVersionKind = CRDGroupVersion.WithKind(NSRecordSet_Kind)
)

func init() {
	SchemeBuilder.Register(&NSRecordSet{}, &NSRecordSetList{})
}
