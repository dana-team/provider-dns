/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AAAARecordSetInitParameters struct {

	// (Set of String) The IPv6 addresses this record set will point to.
	// The IPv6 addresses this record set will point to.
	// +listType=set
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// (Number) The TTL of the record set. Defaults to 3600.
	// The TTL of the record set. Defaults to `3600`.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type AAAARecordSetObservation struct {

	// (Set of String) The IPv6 addresses this record set will point to.
	// The IPv6 addresses this record set will point to.
	// +listType=set
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The TTL of the record set. Defaults to 3600.
	// The TTL of the record set. Defaults to `3600`.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String) DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	// DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type AAAARecordSetParameters struct {

	// (Set of String) The IPv6 addresses this record set will point to.
	// The IPv6 addresses this record set will point to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// (Number) The TTL of the record set. Defaults to 3600.
	// The TTL of the record set. Defaults to `3600`.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String) DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	// DNS zone the record set belongs to. It must be an FQDN, that is, include the trailing dot.
	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// AAAARecordSetSpec defines the desired state of AAAARecordSet
type AAAARecordSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AAAARecordSetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AAAARecordSetInitParameters `json:"initProvider,omitempty"`
}

// AAAARecordSetStatus defines the observed state of AAAARecordSet.
type AAAARecordSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AAAARecordSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AAAARecordSet is the Schema for the AAAARecordSets API. Creates an AAAA type DNS record set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dns}
type AAAARecordSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.addresses) || (has(self.initProvider) && has(self.initProvider.addresses))",message="spec.forProvider.addresses is a required parameter"
	Spec   AAAARecordSetSpec   `json:"spec"`
	Status AAAARecordSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AAAARecordSetList contains a list of AAAARecordSets
type AAAARecordSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AAAARecordSet `json:"items"`
}

// Repository type metadata.
var (
	AAAARecordSet_Kind             = "AAAARecordSet"
	AAAARecordSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AAAARecordSet_Kind}.String()
	AAAARecordSet_KindAPIVersion   = AAAARecordSet_Kind + "." + CRDGroupVersion.String()
	AAAARecordSet_GroupVersionKind = CRDGroupVersion.WithKind(AAAARecordSet_Kind)
)

func init() {
	SchemeBuilder.Register(&AAAARecordSet{}, &AAAARecordSetList{})
}
